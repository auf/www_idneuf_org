<?php

/**
 * @file
 * TM module tests.
 */

class TMFollowTestCase extends DrupalWebTestCase {
	/**
	 * Display information about this test case.
	 */
	public static function getInfo() {
		return array(
			'name' => 'TM Follow module',
			'description' => 'Test the TM Follow module',
			'group' => 'TM Follow',
		);
	}

	/**
	 * Set up the modules and any other
	 */
	public function setUp() {
		// List the modules that should be enabled for this test.
		parent::setUp( 'tm_follow_test' );

		// Create an admin user.
		$this->adminUser = $this->drupalCreateUser(
			array( 'administer blocks' )
		);
	}

	/**
	 * Create one test function here to run all tests from, for speed.
	 */
	function testTMFollow() {
		$this->_testInstall();
		$this->_testConfigureForm();
		$this->_testCssCallback();
	}

	public function _testInstall() {
		$this->assertTrue( file_exists( _tm_follow_css_get_path() ), t( 'The CSS file was generated on install.' ) );
	}

	public function _testConfigureForm() {
		$url = 'admin/structure/block/manage/tm_follow/site/configure';
		$css_path = _tm_follow_css_get_path();
		$original_time = filemtime( $css_path );
		$this->drupalLogin( $this->adminUser );
		$this->drupalPost( $url, array(), t( 'Save block' ) );
		$new_time = filemtime( $css_path );

		$this->assertNotEqual(
			$original_time,
			$new_time,
			t( 'The CSS file is regenerated upon saving the block configure form.' ) );
	}

	public function _testCssCallback() {
		// First, delete the CSS path.
		file_unmanaged_delete( drupal_get_path('module', 'tm_follow') . '/css/tm_follow.css' );
		// Then do a GET on the path to see if the file is actually a CSS file.
		$this->drupalGet( _tm_follow_css_get_path() );
		$this->assertRaw( ' * This CSS file is generated by TM Follow module. DO NOT edit it directly.',
			t( 'The TM Follow CSS menu callback displays the generated CSS.' ) );
	}
}
